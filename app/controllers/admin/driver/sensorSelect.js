angular.module("app").controller("SensorSelect",["$scope","$rootScope","$modalInstance","API","ProjectID","Driver","SensorAttrib","Sensor",function(e,n,r,o,i,s,t,a){var c;e.Ok=function(){var n=[];_.each(e.viewOfSensors,function(e){e.isEnable&&e.driver!=s&&n.push({_id:e._id,driver:s})}),o.Query(t.update,n,function(e){e.err||r.close({})})},e.Cancel=function(){r.dismiss("cancel")},e.SwitchSensor=function(e,n){e.preventDefault(),n.isEnable?n.isEnable=!1:n.isEnable=!0},e.onSearchSensor=function(n){n.preventDefault(),e.UpdateViewOfSensors(e.sensorSearchKey)},e.OnSelectAll=function(r){r.preventDefault(),console.log(e.currentPage,n.popPageSize);for(var o=(e.currentPage-1)*n.popPageSize,i=e.currentPage*n.popPageSize,s=o;i>s;s++)e.viewOfSensors[s].isEnable=!0},e.UpdateViewOfSensors=function(n){e.viewOfSensors=[],n?_.each(c,function(r){(r.title.match(n)||r.channel.match(n))&&e.viewOfSensors.push(r)}):e.viewOfSensors=_.toArray(c),_.each(e.viewOfSensors,function(e){e.driver==s?e.isEnable=!0:e.isEnable=!1}),console.log(e.viewOfSensors)},o.Query(t.info,{project:i},function(n){if(console.log(n),n.err);else{var r=[];c={},_.each(n.result,function(e){var n=e._id.substr(0,12)+".{12}"+e._id.substr(12)+".{2}";r.push(n),c[e._id]=e}),o.Query(a.info,{sids:r},function(n){n.err||(_.each(n.result,function(e){var n=o.ParseSensorID(e.sid),r=n.buildingID+n.gatewayID+n.meterID;c[r]&&(c[r].title=e.title)}),e.UpdateViewOfSensors())})}})}]);